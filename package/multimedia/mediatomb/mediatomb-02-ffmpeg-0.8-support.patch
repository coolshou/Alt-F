--- mediatomb-0.12.1/src/metadata/ffmpeg_handler.cc	2012-10-26 13:36:47.000000000 +0000
+++ mediatomb-patched/src/metadata/ffmpeg_handler.cc	2012-11-04 11:56:38.000000000 +0000
@@ -105,62 +105,85 @@
 
 	if (!pFormatCtx->metadata)
 		return;
-	for (const mapping_t *m = mapping; m->avname != NULL; m++)
+	
+  for (const mapping_t *m = mapping; m->avname != NULL; m++)
 	{
-		AVMetadataTag *tag = NULL;
-		tag = av_metadata_get(pFormatCtx->metadata, m->avname, NULL, 0);
+    AVDictionaryEntry *tag = NULL;
+    tag = av_dict_get(pFormatCtx->metadata, m->avname, NULL, 0);
 		if (tag && tag->value && tag->value[0])
 		{
 			log_debug("Added metadata %s: %s\n", m->avname, tag->value);
 			item->setMetadata(MT_KEYS[m->field].upnp, sc->convert(tag->value));
 		}
 	}
-	/* Old algorithm (doesn't work with libav >= 0.7)
-	if (strlen(pFormatCtx->title) > 0) 
-    {
-	    log_debug("Added metadata title: %s\n", pFormatCtx->title);
-        item->setMetadata(MT_KEYS[M_TITLE].upnp, 
-                          sc->convert(pFormatCtx->title));
-	}
-	if (strlen(pFormatCtx->author) > 0) 
-    {
-	    log_debug("Added metadata author: %s\n", pFormatCtx->author);
-        item->setMetadata(MT_KEYS[M_ARTIST].upnp, 
-                          sc->convert(pFormatCtx->author));
-	}
-	if (strlen(pFormatCtx->album) > 0) 
-    {
-	    log_debug("Added metadata album: %s\n", pFormatCtx->album);
-        item->setMetadata(MT_KEYS[M_ALBUM].upnp, 
-                          sc->convert(pFormatCtx->album));
-	}
-	if (pFormatCtx->year > 0) 
-    {
-	    log_debug("Added metadata year: %d\n", pFormatCtx->year);
-        item->setMetadata(MT_KEYS[M_DATE].upnp, 
-                          sc->convert(String::from(pFormatCtx->year)));
-	}
-	if (strlen(pFormatCtx->genre) > 0) 
-    {
-	    log_debug("Added metadata genre: %s\n", pFormatCtx->genre);
-        item->setMetadata(MT_KEYS[M_GENRE].upnp, 
-                          sc->convert(pFormatCtx->genre));
-	}
-	if (strlen(pFormatCtx->comment) > 0) 
-    {
-	    log_debug("Added metadata comment: %s\n", pFormatCtx->comment);
-        item->setMetadata(MT_KEYS[M_DESCRIPTION].upnp, 
-                          sc->convert(pFormatCtx->comment));
-	}
-	if (pFormatCtx->track > 0) 
-    {
-	    log_debug("Added metadata track: %d\n", pFormatCtx->track);
-        item->setMetadata(MT_KEYS[M_TRACKNUMBER].upnp, 
-                          sc->convert(String::from(pFormatCtx->track)));
-	}
-	*/
 }
 
+static void addFfmpegAuxdataFields(String desiredFrame, AVFormatContext *pFormatCtx, Ref<CdsItem> item)
+{
+	String value;
+	Ref<StringConverter> sc = StringConverter::m2i();
+  
+	if (!pFormatCtx->metadata)
+    return;
+    
+  AVDictionaryEntry *tag = NULL;
+  if (desiredFrame == "TCOM")
+  {
+    tag = av_dict_get(pFormatCtx->metadata, "composer", NULL, AV_DICT_IGNORE_SUFFIX);
+  }
+  else if (desiredFrame == "TENC")
+  {     
+    tag = av_dict_get(pFormatCtx->metadata, "encoder", NULL, AV_DICT_IGNORE_SUFFIX);
+  }
+  else if (desiredFrame == "TRCK")
+  {
+    tag = av_dict_get(pFormatCtx->metadata, "track", NULL, AV_DICT_IGNORE_SUFFIX);
+  }
+  else if (desiredFrame == "TPOS")
+  {
+    tag = av_dict_get(pFormatCtx->metadata, "disc", NULL, AV_DICT_IGNORE_SUFFIX);
+  }
+  else if (desiredFrame == "TIT1")
+  {
+    tag = av_dict_get(pFormatCtx->metadata, "TIT1", NULL, AV_DICT_IGNORE_SUFFIX);
+  }
+  else if (desiredFrame == "TBPM") 
+  {
+    tag = av_dict_get(pFormatCtx->metadata, "TBPM", NULL, AV_DICT_IGNORE_SUFFIX);
+  }
+  else if (desiredFrame == "TCMP")
+  {
+    tag = av_dict_get(pFormatCtx->metadata, "TCMP", NULL, AV_DICT_IGNORE_SUFFIX);
+  }
+  else if (desiredFrame == "STIK")
+  {
+    tag = av_dict_get(pFormatCtx->metadata, "media_type", NULL, AV_DICT_IGNORE_SUFFIX);
+  }
+  else if (desiredFrame == "TVSH")
+  {
+    tag = av_dict_get(pFormatCtx->metadata, "show", NULL, AV_DICT_IGNORE_SUFFIX);
+  }
+  else if (desiredFrame == "TVES")
+  {
+    tag = av_dict_get(pFormatCtx->metadata, "episode_sort", NULL, AV_DICT_IGNORE_SUFFIX);
+  }
+  else if (desiredFrame == "TVSN")
+  {
+    tag = av_dict_get(pFormatCtx->metadata, "season_number", NULL, AV_DICT_IGNORE_SUFFIX);
+  }  
+  else if (desiredFrame == "TPE2" || desiredFrame == "TPE4")
+  {
+    tag = av_dict_get(pFormatCtx->metadata, "album_artist", NULL, AV_DICT_IGNORE_SUFFIX);
+  }
+  
+	if (tag && tag->value && tag->value[0])
+  {
+    log_debug("Added %s: %s\n", desiredFrame.c_str(), tag->value);
+    item->setAuxData(desiredFrame, sc->convert(tag->value));
+  }
+} //addFfmpegAuxdataFields
+
+
 // ffmpeg library calls
 static void addFfmpegResourceFields(Ref<CdsItem> item, AVFormatContext *pFormatCtx, int *x, int *y) 
 {
@@ -261,9 +284,6 @@
 
 } // addFfmpegResourceFields
 
-/*double time_to_double(struct timeval time) {
-        return time.tv_sec + (time.tv_usec / 1000000.0);
-}*/
 
 // Stub for suppressing ffmpeg error messages during matadata extraction
 void FfmpegNoOutputStub(void* ptr, int level, const char* fmt, va_list vl)
@@ -277,33 +297,47 @@
 
     int x = 0;
     int y = 0;
+    int err;
 
-	AVFormatContext *pFormatCtx;
+	AVFormatContext *pFormatCtx = NULL;
 	
 	// Suppress all log messages
 	av_log_set_callback(FfmpegNoOutputStub);
 	
 	// Register all formats and codecs
-    av_register_all();
-
-    // Open video file
-    if (av_open_input_file(&pFormatCtx, 
-                          item->getLocation().c_str(), NULL, 0, NULL) != 0)
-        return; // Couldn't open file
+  av_register_all();
 
-    // Retrieve stream information
-    if (av_find_stream_info(pFormatCtx) < 0)
-    {
-        av_close_input_file(pFormatCtx);
-        return; // Couldn't find stream information
-    }   
+  // Open video file
+  if (avformat_open_input(&pFormatCtx, item->getLocation().c_str(), NULL, NULL) != 0)
+    return; // Couldn't open file    
+
+  if (avformat_find_stream_info(pFormatCtx, NULL) < 0)
+  {
+    avformat_close_input(&pFormatCtx);
+    return; // Couldn't find stream information      
+  }      
+       
 	// Add metadata using ffmpeg library calls
-	addFfmpegMetadataFields(item, pFormatCtx);
+  addFfmpegMetadataFields(item, pFormatCtx);
+
+  //Add auxdata
+  Ref<ConfigManager> cm = ConfigManager::getInstance();
+  Ref<Array<StringBase> > aux = cm->getStringArrayOption(CFG_IMPORT_LIBOPTS_ID3_AUXDATA_TAGS_LIST);
+  if (aux != nil)
+  {
+    for (int j = 0; j < aux->size(); j++)
+    {
+      String desiredFrame(aux->get(j));
+      if (string_ok(desiredFrame))
+          addFfmpegAuxdataFields(desiredFrame, pFormatCtx, item);
+    }
+  }
+  
 	// Add resources using ffmpeg library calls
-	addFfmpegResourceFields(item, pFormatCtx, &x, &y);
+  addFfmpegResourceFields(item, pFormatCtx, &x, &y);
 	
-    // Close the video file
-    av_close_input_file(pFormatCtx);
+  // Close the video file
+  avformat_close_input(&pFormatCtx);
 }
 
 Ref<IOHandler> FfmpegHandler::serveContent(Ref<CdsItem> item, int resNum, off_t *data_size)
